/**
 * This class is generated by jOOQ
 */
package ch.johannes.example.data.schema.tables;


import ch.johannes.example.data.schema.Keys;
import ch.johannes.example.data.schema.Public;
import ch.johannes.example.data.schema.tables.records.AddressRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Address extends TableImpl<AddressRecord> {

	private static final long serialVersionUID = -1535614099;

	/**
	 * The reference instance of <code>public.address</code>
	 */
	public static final Address ADDRESS = new Address();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AddressRecord> getRecordType() {
		return AddressRecord.class;
	}

	/**
	 * The column <code>public.address.id</code>.
	 */
	public final TableField<AddressRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.address.person_id</code>.
	 */
	public final TableField<AddressRecord, Integer> PERSON_ID = createField("person_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>public.address.street</code>.
	 */
	public final TableField<AddressRecord, String> STREET = createField("street", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>public.address.zip_code</code>.
	 */
	public final TableField<AddressRecord, Integer> ZIP_CODE = createField("zip_code", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.address.city</code>.
	 */
	public final TableField<AddressRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * Create a <code>public.address</code> table reference
	 */
	public Address() {
		this("address", null);
	}

	/**
	 * Create an aliased <code>public.address</code> table reference
	 */
	public Address(String alias) {
		this(alias, ADDRESS);
	}

	private Address(String alias, Table<AddressRecord> aliased) {
		this(alias, aliased, null);
	}

	private Address(String alias, Table<AddressRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<AddressRecord, Integer> getIdentity() {
		return Keys.IDENTITY_ADDRESS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AddressRecord> getPrimaryKey() {
		return Keys.ADDRESS_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AddressRecord>> getKeys() {
		return Arrays.<UniqueKey<AddressRecord>>asList(Keys.ADDRESS_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<AddressRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<AddressRecord, ?>>asList(Keys.ADDRESS__ADDRESS_PERSON_ID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Address as(String alias) {
		return new Address(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Address rename(String name) {
		return new Address(name, null);
	}
}
