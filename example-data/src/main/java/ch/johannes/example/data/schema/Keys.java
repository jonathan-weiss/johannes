/**
 * This class is generated by jOOQ
 */
package ch.johannes.example.data.schema;


import ch.johannes.example.data.schema.tables.Address;
import ch.johannes.example.data.schema.tables.EntityAccess;
import ch.johannes.example.data.schema.tables.GroupMembership;
import ch.johannes.example.data.schema.tables.Person;
import ch.johannes.example.data.schema.tables.SchemaVersion;
import ch.johannes.example.data.schema.tables.UserMapping;
import ch.johannes.example.data.schema.tables.records.AddressRecord;
import ch.johannes.example.data.schema.tables.records.EntityAccessRecord;
import ch.johannes.example.data.schema.tables.records.GroupMembershipRecord;
import ch.johannes.example.data.schema.tables.records.PersonRecord;
import ch.johannes.example.data.schema.tables.records.SchemaVersionRecord;
import ch.johannes.example.data.schema.tables.records.UserMappingRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>public</code> 
 * schema
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------

	public static final Identity<AddressRecord, Integer> IDENTITY_ADDRESS = Identities0.IDENTITY_ADDRESS;
	public static final Identity<PersonRecord, Integer> IDENTITY_PERSON = Identities0.IDENTITY_PERSON;

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<AddressRecord> ADDRESS_PKEY = UniqueKeys0.ADDRESS_PKEY;
	public static final UniqueKey<EntityAccessRecord> ENTITY_ACCESS_PKEY = UniqueKeys0.ENTITY_ACCESS_PKEY;
	public static final UniqueKey<GroupMembershipRecord> GROUP_MEMBERSHIP_PKEY = UniqueKeys0.GROUP_MEMBERSHIP_PKEY;
	public static final UniqueKey<PersonRecord> PERSON_PKEY = UniqueKeys0.PERSON_PKEY;
	public static final UniqueKey<PersonRecord> PERSON_GUID_KEY = UniqueKeys0.PERSON_GUID_KEY;
	public static final UniqueKey<SchemaVersionRecord> SCHEMA_VERSION_PK = UniqueKeys0.SCHEMA_VERSION_PK;
	public static final UniqueKey<UserMappingRecord> USER_MAPPING_PKEY = UniqueKeys0.USER_MAPPING_PKEY;
	public static final UniqueKey<UserMappingRecord> USER_MAPPING_TECHNICAL_USERNAME_KEY = UniqueKeys0.USER_MAPPING_TECHNICAL_USERNAME_KEY;

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------

	public static final ForeignKey<AddressRecord, PersonRecord> ADDRESS__ADDRESS_PERSON_ID_FKEY = ForeignKeys0.ADDRESS__ADDRESS_PERSON_ID_FKEY;

	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private static class Identities0 extends AbstractKeys {
		public static Identity<AddressRecord, Integer> IDENTITY_ADDRESS = createIdentity(Address.ADDRESS, Address.ADDRESS.ID);
		public static Identity<PersonRecord, Integer> IDENTITY_PERSON = createIdentity(Person.PERSON, Person.PERSON.ID);
	}

	private static class UniqueKeys0 extends AbstractKeys {
		public static final UniqueKey<AddressRecord> ADDRESS_PKEY = createUniqueKey(Address.ADDRESS, Address.ADDRESS.ID);
		public static final UniqueKey<EntityAccessRecord> ENTITY_ACCESS_PKEY = createUniqueKey(EntityAccess.ENTITY_ACCESS, EntityAccess.ENTITY_ACCESS.ENTITY_GUID, EntityAccess.ENTITY_ACCESS.ACCESSOR_GUID);
		public static final UniqueKey<GroupMembershipRecord> GROUP_MEMBERSHIP_PKEY = createUniqueKey(GroupMembership.GROUP_MEMBERSHIP, GroupMembership.GROUP_MEMBERSHIP.GROUP_GUID, GroupMembership.GROUP_MEMBERSHIP.MEMBER_GUID);
		public static final UniqueKey<PersonRecord> PERSON_PKEY = createUniqueKey(Person.PERSON, Person.PERSON.ID);
		public static final UniqueKey<PersonRecord> PERSON_GUID_KEY = createUniqueKey(Person.PERSON, Person.PERSON.GUID);
		public static final UniqueKey<SchemaVersionRecord> SCHEMA_VERSION_PK = createUniqueKey(SchemaVersion.SCHEMA_VERSION, SchemaVersion.SCHEMA_VERSION.INSTALLED_RANK);
		public static final UniqueKey<UserMappingRecord> USER_MAPPING_PKEY = createUniqueKey(UserMapping.USER_MAPPING, UserMapping.USER_MAPPING.ACCESS_GUID);
		public static final UniqueKey<UserMappingRecord> USER_MAPPING_TECHNICAL_USERNAME_KEY = createUniqueKey(UserMapping.USER_MAPPING, UserMapping.USER_MAPPING.TECHNICAL_USERNAME);
	}

	private static class ForeignKeys0 extends AbstractKeys {
		public static final ForeignKey<AddressRecord, PersonRecord> ADDRESS__ADDRESS_PERSON_ID_FKEY = createForeignKey(ch.johannes.example.data.schema.Keys.PERSON_PKEY, Address.ADDRESS, Address.ADDRESS.PERSON_ID);
	}
}
