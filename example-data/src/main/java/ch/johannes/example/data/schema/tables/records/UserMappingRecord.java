/**
 * This class is generated by jOOQ
 */
package ch.johannes.example.data.schema.tables.records;


import ch.johannes.example.data.schema.tables.UserMapping;

import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserMappingRecord extends UpdatableRecordImpl<UserMappingRecord> implements Record2<UUID, String> {

	private static final long serialVersionUID = 795175924;

	/**
	 * Setter for <code>public.user_mapping.access_guid</code>.
	 */
	public UserMappingRecord setAccessGuid(UUID value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>public.user_mapping.access_guid</code>.
	 */
	public UUID getAccessGuid() {
		return (UUID) getValue(0);
	}

	/**
	 * Setter for <code>public.user_mapping.technical_username</code>.
	 */
	public UserMappingRecord setTechnicalUsername(String value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>public.user_mapping.technical_username</code>.
	 */
	public String getTechnicalUsername() {
		return (String) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<UUID> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<UUID, String> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<UUID, String> valuesRow() {
		return (Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<UUID> field1() {
		return UserMapping.USER_MAPPING.ACCESS_GUID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return UserMapping.USER_MAPPING.TECHNICAL_USERNAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UUID value1() {
		return getAccessGuid();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getTechnicalUsername();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UserMappingRecord value1(UUID value) {
		setAccessGuid(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UserMappingRecord value2(String value) {
		setTechnicalUsername(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UserMappingRecord values(UUID value1, String value2) {
		value1(value1);
		value2(value2);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached UserMappingRecord
	 */
	public UserMappingRecord() {
		super(UserMapping.USER_MAPPING);
	}

	/**
	 * Create a detached, initialised UserMappingRecord
	 */
	public UserMappingRecord(UUID accessGuid, String technicalUsername) {
		super(UserMapping.USER_MAPPING);

		setValue(0, accessGuid);
		setValue(1, technicalUsername);
	}
}
