buildscript {
    def loadConfig = {
        // Check environment
        def environment = project.hasProperty('env') ? project.env : 'development'
        logger.info("Environment is set to '$environment'")

        // Load default configuration
        def defaultConfigFile = new File('config/default.config.groovy')
        def defaultConfig = new ConfigSlurper(environment).parse(defaultConfigFile.toURI().toURL())

        // Load user specific configuration
        def localConfigFile = new File('config/local.config.groovy')
        if (localConfigFile.exists()) {
            def localConfig = new ConfigSlurper(environment).parse(localConfigFile.toURI().toURL())
            return defaultConfig.merge(localConfig)
        } else {
            return defaultConfig
        }
    }

    def getBuildTimestamp = {
        def date = new Date()
        def formattedDate = date.format('yyyyMMddHHmmss')

        return formattedDate
    }

    ext {
        // Define symbolic dependency versions.
        versions = [
                commons_collections   : '4.1',
                commons_io            : '2.5',
                commons_lang          : '3.4',
                fast_classpath_scanner: '2.0.9',
                groovy                : '2.4.6',
                guava                 : '19.0',
                hamcrest              : '1.3',
                javapoet              : '1.8.0',
                junit                 : '4.11',
                mockito               : '2.0.2-beta',
                typetools             : '0.4.8',
                flyway                : '4.0',
                jackson               : '2.4.5',
                jaxb                  : '2.2.7',
                jersey                : '2.14',
                jooq                  : '3.7.3',
                logback               : '1.1.7',
                multipart             : '3.0.14.Final',
                postgres              : '9.4.1208',
                slf4j                 : '1.6.3',
                swagger               : '1.5.8',
                weld                  : '2.3.SP1',
                wildfly               : '10.0.0.Final',

        ]

        // Define symbolic names for dependencies.
        libs = [
                commons_collections      : "org.apache.commons:commons-collections4:${versions.commons_collections}",
                commons_io               : "commons-io:commons-io:${versions.commons_io}",
                commons_lang             : "org.apache.commons:commons-lang3:${versions.commons_lang}",
                fast_classpath_scanner   : "io.github.lukehutch:fast-classpath-scanner:${versions.fast_classpath_scanner}",
                groovy                   : "org.codehaus.groovy:groovy-all:${versions.groovy}",
                guava                    : "com.google.guava:guava:${versions.guava}",
                hamcrest                 : "org.hamcrest:hamcrest-all:${versions.hamcrest}",
                javapoet                 : "com.squareup:javapoet:${versions.javapoet}",
                junit                    : "junit:junit:${versions.junit}",
                mockito                  : "org.mockito:mockito-all:${versions.mockito}",
                typetools                : "net.jodah:typetools:${versions.typetools}",
                flyway_core              : "org.flywaydb:flyway-core:${versions.flyway}",
                jackson_annotations      : "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}",
                jackson_core             : "com.fasterxml.jackson.core:jackson-core:${versions.jackson}",
                jackson_databind         : "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}",
                jackson_datatype         : "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${versions.jackson}",
                jersey_container_servlet : "org.glassfish.jersey.containers:jersey-container-servlet:${versions.jersey}",
                jersey_media_json_jackson: "org.glassfish.jersey.media:jersey-media-json-jackson:${versions.jersey}",
                jooq                     : "org.jooq:jooq:${versions.jooq}",
                jooq_codegen             : "org.jooq:jooq-codegen:${versions.jooq}",
                jooq_meta                : "org.jooq:jooq-meta:${versions.jooq}",
                logback                  : "ch.qos.logback:logback-classic:${versions.logback}",
                multipart                : "org.jboss.resteasy:resteasy-multipart-provider:${versions.multipart}",
                postgres                 : "postgres:postgresql:${versions.postgres}",
                resteasy                 : "org.jboss.resteasy:resteasy-jaxrs:${versions.resteasy}",
                slf4j                    : "org.slf4j:slf4j-api:${versions.slf4j}",
                swagger                  : "io.swagger:swagger-jaxrs:${versions.swagger}",
                weld_api                 : "org.jboss.weld:weld-api:${versions.weld}",
                wildfly                  : "org.wildfly:wildfly-spec-api:${versions.wildfly}",
        ]

        // Build timestamp
        buildTimestamp = getBuildTimestamp();

        // Load (environment specific) configuration
        config = loadConfig()


        repos = {
            flatDir { dirs "${rootProject.projectDir}/libs" }
            mavenCentral()
            jcenter()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
    }

    dependencies {
        classpath libs.jooq_codegen
        classpath libs.postgres
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.9"
    }

    repositories ext.repos
}

allprojects {
    group = 'ch.johannes'
    version = '1.0-SNAPSHOT';


    configurations {
        provided
        pmd
    }

    repositories repos
}


apply plugin: 'idea'

task wrapper(type: Wrapper) { gradleVersion = '2.13' }

